---
import { Icon } from "astro-icon/components"
import Settings from "@components/Settings.astro"
---

<Settings />

<article id="sidebar">
	<section>
		<div>
			<button id="toggle-fullscreen-btn" type="button"
				aria-label="Basculer en plein écran" title="Basculer en plein écran">
				<Icon name="iconamoon:screen-full" />
			</button>
			<button id="sticky-sidebar-btn" type="button"
				aria-label="Forcer l'affichage de la barre latérale" title="Forcer l'affichage de la barre latérale">
				<Icon name="iconamoon:download" />
			</button>
			<button id="open-settings-btn" type="button"
				aria-label="Ouvrir les paramètres" title="Ouvrir les paramètres">
				<Icon name="iconamoon:settings" />
			</button>
		</div>

		<button id="sidebar-btn" class="hide" type="button"
			aria-label="Ouvrir/Fermer le panneau latéral" title="Ouvrir/Fermer le panneau latéral">
			<span>
				<Icon name="iconamoon:arrow-left-2" />
				<Icon name="iconamoon:arrow-right-2" />
			</span>
		</button>

		<aside>
			<div>
				<slot />
			</div>
		</aside>
	</section>
</article>

<script>
	import { dispatchEvent, Event, getSettings, Position } from "@types"

	const wrapper = document.getElementById("sidebar")!
	const section = wrapper.querySelector("section")!
	const toggleFullscreenBtn = document.getElementById("toggle-fullscreen-btn")!
	const stickySidebarBtn = document.getElementById("sticky-sidebar-btn")!
	const openSettingsBtn = document.getElementById("open-settings-btn")!
	const openSidebarBtn = document.getElementById("sidebar-btn")!

	document.addEventListener("fullscreenchange", () => {
		if (document.fullscreenElement) {
			toggleFullscreenBtn.classList.add("active")
		} else {
			toggleFullscreenBtn.classList.remove("active")
		}
	})

	document.addEventListener("keydown", (e) => {
		if (e.key === "F11") {
			e.preventDefault()
			toggleFullscreenBtn.click()
		}
	})

	toggleFullscreenBtn.addEventListener("click", () => {
		if (!document.fullscreenElement) {
			document.documentElement.requestFullscreen()
		} else {
			if (document.exitFullscreen) {
				document.exitFullscreen()
			}
		}
	})

	stickySidebarBtn.addEventListener("click", () => {
		const settings = getSettings()
		settings.sidebar.sticky = !settings.sidebar.sticky
		window.localStorage.setItem("settings", JSON.stringify(settings))
		dispatchEvent(Event.SETTINGS)
		if (!settings.sidebar.sticky) {
			section.classList.remove("open")
		}
	})

	openSettingsBtn.addEventListener("click", () => {
		dispatchEvent(Event.SHOW_SETTINGS)
		openSettingsBtn.classList.add("active")
	})

	openSidebarBtn.addEventListener("click", () => {
		section.classList.toggle("open")
	})

	function checkSettings() {
		const settings = getSettings()
		section.classList.toggle("reverse", settings.sidebar.position === Position.LEFT)

		if (settings.sidebar.show) {
			openSidebarBtn.classList.remove("hide")
		} else {
			section.classList.remove("open")
			openSidebarBtn.classList.add("hide")
		}

		if (settings.sidebar.sticky) {
			section.classList.add("open")
			openSidebarBtn.classList.add("hide")
			stickySidebarBtn.classList.add("active")
		} else {
			openSidebarBtn.classList.remove("hide")
			stickySidebarBtn.classList.remove("active")
		}
	}

	document.addEventListener(Event.SETTINGS, checkSettings)
	checkSettings()
</script>

<style>
	#sidebar {
		--sidebar-width: 430px;
		--button-width: 36px;
		--button-height: 120px;
		--border-radius: 12px;
		--spacing: 16px;
		--bg-color: rgba(0, 0, 0, 0.6);
		--blur: blur(12px);

		pointer-events: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;

		> section {
			position: relative;
			top: 0;
			left: calc(100% - var(--button-width));
			height: inherit;
			width: var(--sidebar-width);
			display: flex;
			align-items: center;
			transition: left 0.3s ease-in-out;

			.reverse {
				left: unset;
				right: calc(100% - var(--button-width));
				flex-direction: row-reverse;

				> button {
					transform: rotate(180deg);
				}

				> div {
					right: unset;
					left: calc(100% - var(--button-width) + 1rem);
					transform: scaleX(-1)
				}
			}

			&.open {
				left: calc(100% - var(--sidebar-width));

				> aside {
					box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
				}

				> button > span {
					transform: translateX(-26px);
					clip-path: polygon(38% 0, 100% 0, 100% 100%, 38% 100%);
				}
			}

			> div {
				z-index: 1;
				pointer-events: auto;
				position: absolute;
				top: 1rem;
				right: calc(100% - var(--button-width) + 1rem);
				display: flex;
				align-items: center;
				justify-content: center;
				border-radius: 5px;
				overflow: hidden;

				> button {
					padding: 0.5rem;
					display: inline-flex;
					align-items: center;
					justify-content: center;
					outline: none;
					border: none;
					font-size: 1.3em;
					cursor: pointer;
					background-color: rgba(0, 0, 0, 0.5);
					backdrop-filter: blur(4px);
					transition: opacity 0.3s ease-in-out, background-color 0.2s ease-in-out;
					color: white;

					&.active {
						background-color: rgba(92, 92, 92, 0.5);
					}

					&#sticky-sidebar-btn {
						transform: rotate(-90deg);
					}
				}
			}

			> button {
				pointer-events: auto;
				position: relative;
				cursor: pointer;
				width: var(--button-width);
				height: var(--button-height);
				border-radius: var(--border-radius) 0 0 var(--border-radius);
				background-color: var(--bg-color);
				backdrop-filter: var(--blur);
				outline: none;
				border: none;
				color: white;
				transition: opacity 0.3s ease-in-out;

				&::before,
				&::after {
					position: absolute;
					top: calc(var(--border-radius) * -1);
					right: 0;
					content: "";
					width: var(--border-radius);
					height: var(--border-radius);
					background-color: transparent;
					border-radius: 0 0 var(--border-radius) 0;
					box-shadow: 0 0 0 var(--border-radius) var(--bg-color);
					clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
					transform: scale(1.0001);
				}

				&::after {
					transform: rotate(-90deg);
					top: unset;
					bottom: calc(var(--border-radius) * -1);
				}

				> span {
					pointer-events: none;
					font-size: 2em;
					display: flex;
					justify-content: space-between;
					align-items: center;
					width: 50px;
					clip-path: polygon(0 0, 50% 0, 50% 100%, 0% 100%);
					transition: all 0.3s ease-in-out;
					margin-left: 6px;
				}
			}

			> aside {
				flex-grow: 1;
				pointer-events: auto;
				margin: var(--spacing) var(--spacing) var(--spacing) 0;
				padding: var(--spacing) calc(var(--spacing) / 2) var(--spacing) var(--spacing);
				background-color: var(--bg-color);
				backdrop-filter: var(--blur);
				border-radius: var(--border-radius);
				height: calc(100% - var(--spacing) * 2);
				transition: box-shadow 0.3s ease-in-out;
				overflow: hidden;

				> div {
					display: flex;
					flex-direction: column;
					gap: var(--spacing);
					height: 100%;
					padding-right: calc(var(--spacing) / 2);
					overflow-y: auto;

					* {
						border-radius: 8px;
					}
				}
			}
		}

		@media screen and (max-width: 768px) {
			--button-height: 160px;
			--top-offset: 2rem;

			> section {
				top: calc(100vh - var(--button-width));
				left: 0;
				right: 0;
				width: 100%;
				height: calc(100vh - var(--button-width) - var(--top-offset));
				grid-template-columns: unset;
				grid-template-rows: var(--button-width) 1fr;
				justify-items: center;
				transition: top 0.3s ease-in-out;

				&.open {
					left: 0;
					top: var(--top-offset);
				}

				> button {
					transform: rotate(90deg);
				}

				> aside {
					margin: 0 var(--spacing) var(--spacing) var(--spacing);
					width: 100%;
					height: calc(100vh - var(--spacing) * 2 - var(--top-offset));
				}
			}
		}
	}
</style>
