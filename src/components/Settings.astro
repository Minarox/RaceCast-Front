---
import { Image } from "astro:assets"
import { Icon } from "astro-icon/components"
import Loading from "@assets/loading.svg"
import { Position } from "@types"

const sidebar = Astro.props.sidebar || false
---

<form id="settings-form">
	<article>
		<header>
			Paramètres
			<button id="close-settings-btn" type="button"
				aria-label="Fermer les paramètres" title="Fermer les paramètres">
				<Icon name="iconamoon:close" />
			</button>
		</header>

		<section>
			<h2>Disposition</h2>
			{sidebar && <div class="split-layout">
				<label for="settings-main-cam">Caméra principale :</label>
				<Image id="settings-cam-loading" src={Loading} alt="Loading..." />
				<select id="settings-main-cam" class="hidden" disabled></select>
			</div>
			<div class="split-layout">
				<label for="settings-speed">Afficher la vitesse :</label>
				<div>
					<input type="checkbox" id="settings-speed" checked />
					<select id="settings-speed-position">
						<option value={Position.LEFT}>Gauche</option>
						<option value={Position.RIGHT}>Droite</option>
					</select>
				</div>
			</div>
			<div class="split-layout">
				<label for="settings-map">Afficher la position GPS :</label>
				<div>
					<input type="checkbox" id="settings-map" checked />
					<select id="settings-map-position">
						<option value={Position.LEFT}>Gauche</option>
						<option value={Position.RIGHT}>Droite</option>
					</select>
				</div>
			</div>
			<div class="split-layout">
				<label for="settings-other-cameras">Afficher les autres caméras :</label>
				<input type="checkbox" id="settings-other-cameras" checked />
			</div>}
			<div class="split-layout">
				<label for="settings-sidebar">
					{sidebar && 'Afficher le panneau latéral :' || 'Position des boutons :'}
				</label>
				<div>
					{sidebar && <input type="checkbox" id="settings-sidebar" checked />}
					<select id="settings-sidebar-position">
						<option value={Position.LEFT}>Gauche</option>
						<option value={Position.RIGHT}>Droite</option>
					</select>
				</div>
			</div>

			<h2>Audio</h2>
			<div id="mic-volumes" class="split-layout">
				<Image src={Loading} alt="Loading..." />
			</div>
		</section>

		<footer>
			<button id="close-settings-footer-btn" type="button">Fermer</button>
			<button id="save-settings-btn" type="submit">Enregistrer</button>
		</footer>
	</article>
</form>

<script>
	/*

	# Paramètres
	## Disposition :
	...

	## Son :
	Volume micro 1 : [0-100%]
	Volume micro 2 : [0-100%]
	...

	*/

	import { RemoteTrackPublication } from "livekit-client"
	import { dispatchEvent, Event, getSettings, Position } from "@types"

	const openSettingsBtn = document.getElementById("open-settings-btn")
	const camerasSelectLoading = document.getElementById("settings-cam-loading")!
	const camerasSelect = document.getElementById("settings-main-cam") as unknown as HTMLSelectElement
	const micVolumes = document.getElementById("mic-volumes")!
	const form = document.getElementById("settings-form")!
	const closeBtn = document.getElementById("close-settings-btn")!
	const closeFooterBtn = document.getElementById("close-settings-footer-btn")!
	const showSpeed = document.getElementById("settings-speed") as HTMLInputElement
	const showSpeedPosition = document.getElementById("settings-speed-position") as unknown as HTMLSelectElement
	const showMap = document.getElementById("settings-map") as HTMLInputElement
	const showMapPosition = document.getElementById("settings-map-position") as unknown as HTMLSelectElement
	const showOtherCameras = document.getElementById("settings-other-cameras") as HTMLInputElement
	const showSidebar = document.getElementById("settings-sidebar") as HTMLInputElement
	const sidebarPosition = document.getElementById("settings-sidebar-position")! as unknown as HTMLSelectElement

	let settings = getSettings()
	window.localStorage.setItem("settings", JSON.stringify(settings))
	dispatchEvent(Event.SETTINGS)

	function toggleMobileSettings() {
		const isSmallScreen = window.innerWidth < 768
		showSpeedPosition?.classList.toggle("hidden", isSmallScreen)
		showMapPosition?.classList.toggle("hidden", isSmallScreen)
	}

	if (camerasSelect) {
		document.addEventListener(Event.CAMERAS, (event: any) => {
			camerasSelectLoading.classList.add("hidden")
			camerasSelect.classList.remove("hidden")
			const videoTracks: RemoteTrackPublication[] = event.detail
			camerasSelect.innerHTML = ''
			camerasSelectLoading.classList.add("hidden")

			if (videoTracks.length === 0) {
				camerasSelect.innerHTML = '<option value="" disabled>Aucune caméra détectée</option>'
				camerasSelect.disabled = true
				return
			}

			videoTracks.forEach((track) => {
				const option = document.createElement('option')
				option.value = track.trackSid
				option.textContent = track.trackName || `Caméra ${track.trackSid}`
				camerasSelect.appendChild(option)
			})
			camerasSelect.disabled = false
		})
	}

	document.addEventListener(Event.MICROPHONES, (event: any) => {
		const audioTracks: RemoteTrackPublication[] = event.detail
		micVolumes.innerHTML = ''

		if (audioTracks.length === 0) {
			micVolumes.innerHTML = '<p>Aucun micro détecté</p>'
			return
		}

		audioTracks.forEach((track) => {
			const volumeControl = document.createElement('input')
			volumeControl.type = 'range'
			volumeControl.min = '0'
			volumeControl.max = '100'
			volumeControl.value = '100'
			volumeControl.id = `mic-volume-${track.trackSid}`
			micVolumes.appendChild(volumeControl)
		})
	})

	document.addEventListener(Event.SHOW_SETTINGS, () => {
		form.classList.add('show')
		const settings = getSettings()

		if (camerasSelect) {
			camerasSelect.value = settings.mainCamera
		}

		if (showMap) {
			showMap.checked = settings.map.show
		}

		if (showMapPosition) {
			showMapPosition.value = settings.map.position
		}

		if (showOtherCameras) {
			showOtherCameras.checked = settings.showOtherCameras
		}

		if (showSidebar) {
			showSidebar.checked = settings.sidebar.show
		}

		if (showSpeed) {
			showSpeed.checked = settings.speed.show
		}

		if (showSpeedPosition) {
			showSpeedPosition.value = settings.speed.position
		}

		sidebarPosition.value = settings.sidebar.position
	})

	closeBtn.addEventListener("click", () => {
		form.classList.remove('show')
		openSettingsBtn?.classList.remove("active")
	})

	closeFooterBtn.addEventListener("click", () => {
		form.classList.remove('show')
		openSettingsBtn?.classList.remove("active")
	})

	form.addEventListener("submit", (e) => {
		e.preventDefault()

		if (camerasSelect) {
			settings.mainCamera = camerasSelect.value
		}

		if (showMap) {
			settings.map.show = showMap.checked
		}

		if (showMapPosition) {
			settings.map.position = showMapPosition.value as Position
		}

		if (showOtherCameras) {
			settings.showOtherCameras = showOtherCameras.checked
		}

		if (showSidebar) {
			settings.sidebar.show = showSidebar.checked
		}

		if (showSpeed) {
			settings.speed.show = showSpeed.checked
		}

		if (showSpeedPosition) {
			settings.speed.position = showSpeedPosition.value as Position
		}

		settings.sidebar.position = sidebarPosition.value as Position

		// const audioTracks = micVolumes.querySelectorAll('input[type="range"]')
		// settings.micVolumes = {}
		// audioTracks.forEach((input: any) => {
		//     const trackSid = input.id.replace('mic-volume-', '')
		//     settings.micVolumes[trackSid] = parseInt(input.value)
		// })

		window.localStorage.setItem("settings", JSON.stringify(settings))
		dispatchEvent(Event.SETTINGS)
		form.classList.remove('show')
		openSettingsBtn?.classList.remove("active")
	})

	document.addEventListener("resize", toggleMobileSettings)

	document.addEventListener("keydown", (e) => {
		if (e.key === "Escape") {
			if (form.classList.contains('show')) {
				form.classList.remove('show')
				openSettingsBtn?.classList.remove("active")
			}
		}
	})

	toggleMobileSettings()
</script>

<style>
	form {
		z-index: 100;
		opacity: 0;
		pointer-events: none;
		user-select: none;
		position: fixed;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		display: inline-flex;
		justify-content: center;
		align-items: center;
		padding: 8px;
		background-color: rgba(0, 0, 0, 0.3);
		transition: opacity 180ms ease-in-out;

		&.show {
			opacity: 1;
			pointer-events: auto;
			user-select: auto;
		}

		article {
			width: min(600px, 100%);
			padding: 1.2rem;
			background-color: white;
			border-radius: 8px;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			color: black;

			header {
				font-size: 1.5em;
				font-weight: bold;
				margin-bottom: 1rem;
				display: flex;
				justify-content: space-between;
				align-items: center;

				button {
					background: none;
					border: none;
					cursor: pointer;
					font-size: 1em;

					&:hover {
						color: #444;
					}
				}
			}

			section {
				h2 {
					font-size: 1.2em;
					margin-top: 1.5rem;
					margin-bottom: 0.5rem;
					border-bottom: 1px solid #ccc;
					padding-bottom: 0.2rem;
				}

				.split-layout {
					display: flex;
					justify-content: space-between;
					align-items: center;
					margin: 0.4rem 0;

					> div {
						display: flex;
						gap: 0.6rem;
						align-items: center;
					}
				}
			}

			footer {
				display: flex;
				justify-content: flex-end;
				gap: 0.6rem;
				margin-top: 1.5rem;

				#save-settings-btn {
					background-color: #4CAF50;
					color: white;
					border: none;
					padding: 0.6rem 1.2rem;
					border-radius: 8px;
					cursor: pointer;
					font-size: 0.9em;

					&:hover {
						background-color: #45a049;
					}
				}

				#close-settings-footer-btn {
					color: black;
					background-color: transparent;
					border: none;
					padding: 0.6rem 1.2rem;
					cursor: pointer;
					font-size: 0.9em;

					&:hover {
						color: #444;
					}
				}
			}
		}
	}
</style>
